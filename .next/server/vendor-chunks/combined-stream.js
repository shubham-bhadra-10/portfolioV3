/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/combined-stream";
exports.ids = ["vendor-chunks/combined-stream"];
exports.modules = {

/***/ "(ssr)/./node_modules/combined-stream/lib/combined_stream.js":
/*!*************************************************************!*\
  !*** ./node_modules/combined-stream/lib/combined_stream.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var util = __webpack_require__(/*! util */ \"util\");\r\nvar Stream = (__webpack_require__(/*! stream */ \"stream\").Stream);\r\nvar DelayedStream = __webpack_require__(/*! delayed-stream */ \"(ssr)/./node_modules/delayed-stream/lib/delayed_stream.js\");\r\n\r\nmodule.exports = CombinedStream;\r\nfunction CombinedStream() {\r\n  this.writable = false;\r\n  this.readable = true;\r\n  this.dataSize = 0;\r\n  this.maxDataSize = 2 * 1024 * 1024;\r\n  this.pauseStreams = true;\r\n\r\n  this._released = false;\r\n  this._streams = [];\r\n  this._currentStream = null;\r\n  this._insideLoop = false;\r\n  this._pendingNext = false;\r\n}\r\nutil.inherits(CombinedStream, Stream);\r\n\r\nCombinedStream.create = function(options) {\r\n  var combinedStream = new this();\r\n\r\n  options = options || {};\r\n  for (var option in options) {\r\n    combinedStream[option] = options[option];\r\n  }\r\n\r\n  return combinedStream;\r\n};\r\n\r\nCombinedStream.isStreamLike = function(stream) {\r\n  return (typeof stream !== 'function')\r\n    && (typeof stream !== 'string')\r\n    && (typeof stream !== 'boolean')\r\n    && (typeof stream !== 'number')\r\n    && (!Buffer.isBuffer(stream));\r\n};\r\n\r\nCombinedStream.prototype.append = function(stream) {\r\n  var isStreamLike = CombinedStream.isStreamLike(stream);\r\n\r\n  if (isStreamLike) {\r\n    if (!(stream instanceof DelayedStream)) {\r\n      var newStream = DelayedStream.create(stream, {\r\n        maxDataSize: Infinity,\r\n        pauseStream: this.pauseStreams,\r\n      });\r\n      stream.on('data', this._checkDataSize.bind(this));\r\n      stream = newStream;\r\n    }\r\n\r\n    this._handleErrors(stream);\r\n\r\n    if (this.pauseStreams) {\r\n      stream.pause();\r\n    }\r\n  }\r\n\r\n  this._streams.push(stream);\r\n  return this;\r\n};\r\n\r\nCombinedStream.prototype.pipe = function(dest, options) {\r\n  Stream.prototype.pipe.call(this, dest, options);\r\n  this.resume();\r\n  return dest;\r\n};\r\n\r\nCombinedStream.prototype._getNext = function() {\r\n  this._currentStream = null;\r\n\r\n  if (this._insideLoop) {\r\n    this._pendingNext = true;\r\n    return; // defer call\r\n  }\r\n\r\n  this._insideLoop = true;\r\n  try {\r\n    do {\r\n      this._pendingNext = false;\r\n      this._realGetNext();\r\n    } while (this._pendingNext);\r\n  } finally {\r\n    this._insideLoop = false;\r\n  }\r\n};\r\n\r\nCombinedStream.prototype._realGetNext = function() {\r\n  var stream = this._streams.shift();\r\n\r\n\r\n  if (typeof stream == 'undefined') {\r\n    this.end();\r\n    return;\r\n  }\r\n\r\n  if (typeof stream !== 'function') {\r\n    this._pipeNext(stream);\r\n    return;\r\n  }\r\n\r\n  var getStream = stream;\r\n  getStream(function(stream) {\r\n    var isStreamLike = CombinedStream.isStreamLike(stream);\r\n    if (isStreamLike) {\r\n      stream.on('data', this._checkDataSize.bind(this));\r\n      this._handleErrors(stream);\r\n    }\r\n\r\n    this._pipeNext(stream);\r\n  }.bind(this));\r\n};\r\n\r\nCombinedStream.prototype._pipeNext = function(stream) {\r\n  this._currentStream = stream;\r\n\r\n  var isStreamLike = CombinedStream.isStreamLike(stream);\r\n  if (isStreamLike) {\r\n    stream.on('end', this._getNext.bind(this));\r\n    stream.pipe(this, {end: false});\r\n    return;\r\n  }\r\n\r\n  var value = stream;\r\n  this.write(value);\r\n  this._getNext();\r\n};\r\n\r\nCombinedStream.prototype._handleErrors = function(stream) {\r\n  var self = this;\r\n  stream.on('error', function(err) {\r\n    self._emitError(err);\r\n  });\r\n};\r\n\r\nCombinedStream.prototype.write = function(data) {\r\n  this.emit('data', data);\r\n};\r\n\r\nCombinedStream.prototype.pause = function() {\r\n  if (!this.pauseStreams) {\r\n    return;\r\n  }\r\n\r\n  if(this.pauseStreams && this._currentStream && typeof(this._currentStream.pause) == 'function') this._currentStream.pause();\r\n  this.emit('pause');\r\n};\r\n\r\nCombinedStream.prototype.resume = function() {\r\n  if (!this._released) {\r\n    this._released = true;\r\n    this.writable = true;\r\n    this._getNext();\r\n  }\r\n\r\n  if(this.pauseStreams && this._currentStream && typeof(this._currentStream.resume) == 'function') this._currentStream.resume();\r\n  this.emit('resume');\r\n};\r\n\r\nCombinedStream.prototype.end = function() {\r\n  this._reset();\r\n  this.emit('end');\r\n};\r\n\r\nCombinedStream.prototype.destroy = function() {\r\n  this._reset();\r\n  this.emit('close');\r\n};\r\n\r\nCombinedStream.prototype._reset = function() {\r\n  this.writable = false;\r\n  this._streams = [];\r\n  this._currentStream = null;\r\n};\r\n\r\nCombinedStream.prototype._checkDataSize = function() {\r\n  this._updateDataSize();\r\n  if (this.dataSize <= this.maxDataSize) {\r\n    return;\r\n  }\r\n\r\n  var message =\r\n    'DelayedStream#maxDataSize of ' + this.maxDataSize + ' bytes exceeded.';\r\n  this._emitError(new Error(message));\r\n};\r\n\r\nCombinedStream.prototype._updateDataSize = function() {\r\n  this.dataSize = 0;\r\n\r\n  var self = this;\r\n  this._streams.forEach(function(stream) {\r\n    if (!stream.dataSize) {\r\n      return;\r\n    }\r\n\r\n    self.dataSize += stream.dataSize;\r\n  });\r\n\r\n  if (this._currentStream && this._currentStream.dataSize) {\r\n    this.dataSize += this._currentStream.dataSize;\r\n  }\r\n};\r\n\r\nCombinedStream.prototype._emitError = function(err) {\r\n  this._reset();\r\n  this.emit('error', err);\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/combined-stream/lib/combined_stream.js\n");

/***/ })

};
;